@startuml

'Concrete Class
class com.dejong.discount.BlueMembership {
    - THREE_PERCENT:double
    + calculate(double sum):double
}
class com.dejong.discount.SilverMembership {
    - FIVE_PERCENT:double
    + calculate(double sum):double
}
class com.dejong.discount.GoldMembership {
    - SEVEN_PERCENT:double
    + calculate(double sum):double
}
class com.dejong.discount.NoMembership {
    - NO_PERCENT:double
    + calculate(double sum):double
}
class com.dejong.member.Member {
    - iDiscountStrategy:IDiscountStrategy
    - list:ProductList
    - cart:ShoppingCart
    - name:String
    - email:String
    - address:String
    - newsletters:String
    + Member(String name, String email, String address)
    + setName(String name):void
    + setName(String email):void
    + setName(String address):void
    + getName(String name):String
    + getName(String email):String
    + getName(String address):String
    + setDiscountStrategy(IDiscountStrategy iDiscountStrategy):void
    + getIDiscountStrategy():IDiscountStrategy
    + getShoppingCart():ShoppingCart
    + update(String news):void
    - display():void
    + displayProductList():void
}
class com.dejong.newsletters.Newsletters {
    - observers:ArrayList<IObserver>
    - news:String
    + Newsletters()
    + setObservers(ArrayList<IObserver> observers):void
    + getObservers():ArrayList<IObserver>
    - newsletters():void
    + setNews(String news):void
    + getNews():String
    + registerObserver(IObserver observer):void
    + removeObserver(IObserver observer):void
    + notifyObservers():void
}
abstract class com.dejong.delivery.ServicesDecorator << abstract >> {
    # delivery:IDelivery
    + ServicesDecorator(IDelivery delivery)
}
class com.dejong.delivery.GiftCard {
    - {static} GIFTCARD:double
    + GiftCard(IDelivery delivery)
    + {method} description():String
    + {method} price():double
}
class com.dejong.delivery.Insurances{
    - {static} INSURANCE:double
    + Insurances(IDelivery delivery)
    + {method} description():String
    + {method} price():double
}
class com.dejong.delivery.PrimeDelivery {
    - {static} PRIME:double
    + {method} description():String
    + {method} price():double
}
class com.dejong.delivery.StandardDelivery {
    - {static} STANDARD:double
    + {method} description():String
    + {method} price():double
}
class com.dejong.delivery.WrappingServices {
    - {static} WRAPPING:double
    + WrappingServices(IDelivery delivery)
    + {method} description():String
    + {method} price():double
}
class com.dejong.cart.ShoppingCart {
    - delivery:IDelivery
    - List<Shoes> items;
    + ShoppingCart()
    + setDelivery(IDelivery delivery):void
    + getDescription():String
    + getDeliveryCost():double
    + placeOrder(List<Shoes> items):void
    + getOrder():List<Shoes>
}
class com.dejong.products.FlipFlops {
    + FlipFlops()
}
class com.dejong.products.HighHeels {
    + HighHeels()
}
class com.dejong.products.RunningShoes {
    + RunningShoes()
}
abstract class com.dejong.products.Shoes << abstract >> {
    ~ brand:String
    ~ description:String
    ~ price:double
    + getBrand():String
    + getDescription():String
    + getPrice():double
    + setBrand(String name):void
    + setDescription(String description):void
    + setPrice(double price):void
    + toString():String
}
abstract class com.dejong.products.ShoeFactory << abstract >> {
    ~ {abstract} createProduct(ShoeType type):Shoes
    + create(ShoeType type):Shoes
}
class com.dejong.products.ShoeCreator {
    ~ createProduct(ShoeType type):Shoes
}
class com.dejong.suppliers.Suppliers {
    - name:String
    - creator:ShoeFactory
    + Suppliers(String name, ShoeFactory creator)
    + setName(String name):void
    + setCreator(ShoeCreator creator):void
    + getName():String
    + createShoe(ShoeType type):Shoes
}
enum com.dejong.display.ProductList << enumeration >> {
    INSTANCE
    - items:List<Shoes>
    ~ ProductList()
    + addProduct(Shoes item):void
    + getProducts():List<Shoes>
}
enum com.dejong.products.ShoeType << enumeration >> {
    RUNNING_SHOES
    HIGH_HEELS
    FLIP_FLOPS
}
class com.dejong.utilities.Utilities {
    + {static} UNKNOWN:String
    + {static} NO_VALUE:double
}
abstract class com.dejong.process.ProcessOrderTemplate {
    + {static} processOrder(Map<String,Shoes> shoes, IDelivery delivery):void
    - calculateProductTotal(Map<String,Shoes> shoes):double
    - calculateDeliveryPrice(IDelivery delivery):double
    # {abstract} calculateDiscount(double productTotal):double
    - calculateSum(double discountedPrice, double deliveryPrice):double
    # {abstract} getDiscount():double
    - display(double sum)
}
class com.dejong.process.BlueMembershipDiscount {
    - {static} THREE_PERCENT:double
    # calculateDiscount(double productTotal):double
    # getDiscount():double
}
class com.dejong.process.SilverMembershipDiscount {
    - {static} FIVE_PERCENT:double
    # calculateDiscount(double productTotal):double
    # getDiscount():double
}
class com.dejong.process.GoldMembershipDiscount {
    - {static} SEVEN_PERCENT:double
    # calculateDiscount(double productTotal):double
    # getDiscount():double
}
class com.dejong.process.NoMembershipDiscount {
    - {static} ZERO_PERCENT:double
    # calculateDiscount(double productTotal):double
    # getDiscount():double
}

'Interface
interface com.dejong.discount.IDiscountStrategy << interface >> {
    + {abstract} calculate(double sum):double
}
interface com.dejong.newsletters.ISubject << interface >> {
    + {abstract} registerObserver(IObserver observer):void
    + {abstract} removeObserver(IObserver observer):void
    + {abstract} notifyObservers():void
}
interface com.dejong.newsletters.IObserver << interface >> {
    + {abstract} update(String news):void
}
interface com.dejong.delivery.IDelivery << interface >> {
    + {abstract} description():String
    + {abstract} price():double
}

'Relationships
com.dejong.member.Member --o com.dejong.discount.IDiscountStrategy : aggregation
com.dejong.discount.IDiscountStrategy <|.. com.dejong.discount.BlueMembership : implements
com.dejong.discount.IDiscountStrategy <|.. com.dejong.discount.SilverMembership : implements
com.dejong.discount.IDiscountStrategy <|.. com.dejong.discount.GoldMembership : implements
com.dejong.discount.IDiscountStrategy <|.. com.dejong.discount.NoMembership : implements
com.dejong.newsletters.IObserver <|.. com.dejong.member.Member : implements
com.dejong.newsletters.ISubject <|.. com.dejong.newsletters.Newsletters : implements
com.dejong.newsletters.ISubject --> com.dejong.newsletters.IObserver : observers
com.dejong.member.Member --> com.dejong.newsletters.ISubject : subject
com.dejong.member.Member "1" *-- com.dejong.cart.ShoppingCart
com.dejong.cart.ShoppingCart --* "1" com.dejong.delivery.IDelivery : " method"
com.dejong.delivery.IDelivery <|.. com.dejong.delivery.PrimeDelivery : implements
com.dejong.delivery.IDelivery <|.. com.dejong.delivery.StandardDelivery : implements
com.dejong.delivery.IDelivery <|.. com.dejong.delivery.ServicesDecorator : implements
com.dejong.delivery.ServicesDecorator <|-- com.dejong.delivery.WrappingServices : extends
com.dejong.delivery.ServicesDecorator <|-- com.dejong.delivery.GiftCard : extends
com.dejong.delivery.ServicesDecorator <|-- com.dejong.delivery.Insurances : extends
com.dejong.products.Shoes <|-- com.dejong.products.FlipFlops : "extends"
com.dejong.products.Shoes <|-- com.dejong.products.RunningShoes : "extends"
com.dejong.products.Shoes <|-- com.dejong.products.HighHeels : "extends"
com.dejong.products.ShoeFactory <|-- com.dejong.products.ShoeCreator : "extends"
com.dejong.products.Shoes "1..*" <-- com.dejong.products.ShoeCreator : "creates"
com.dejong.products.ShoeFactory --* "1" com.dejong.suppliers.Suppliers
com.dejong.member.Member "1" *-- com.dejong.display.ProductList : has

'Ordering Process
com.dejong.process.ProcessOrderTemplate <|-- com.dejong.process.NoMembershipDiscount : "extends"
com.dejong.process.ProcessOrderTemplate <|-- com.dejong.process.BlueMembershipDiscount : "extends"
com.dejong.process.ProcessOrderTemplate <|-- com.dejong.process.SilverMembershipDiscount : "extends"
com.dejong.process.ProcessOrderTemplate <|-- com.dejong.process.GoldMembershipDiscount : "extends"


@enduml